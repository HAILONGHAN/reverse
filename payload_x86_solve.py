#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim:fenc=utf-8
#
# Copyright Â© 2019 ctf <hailongnan@163.com>
#
# Distributed under terms of the MIT license.

"""
https://ctf.sixstars.team/challenges#journey_x86
reverse 2018 Google CTF X86
33841c15aa6987a7b61731469df5d0cb
"""

aim = [0xA2, 0x75, 0xd6,0x0D6, 0x0D1, 0x37, 0x9D, 0x0EF, 0x12, 0x93, 0xB5, 0x58, 0x11, 0x23, 0xE0, 0xD6, 0xBE, 0x73, 0x3E, 0xE9, 0x0DD, 0x4C, 0x98, 0x0EA, 0x9B, 0x91, 0x0BB, 0x0EF, 0x0D7, 0x39, 0x0F, 0xA0]
matrx = [228, 482, 450, 395, 246, 381, 25, 26, 154, 203, 341, 316, 149, 143, 432, 309, 284, 511, 390, 496, 449, 136, 125, 72, 364, 274, 503, 422, 311, 78,271, 18, 5, 199, 363, 414, 356, 107, 115, 439, 156, 265, 330, 361, 200, 460, 388, 83, 8, 188, 104, 306, 128, 419, 262, 333, 508, 215, 138, 55,324, 16, 397, 193, 14, 279, 493, 118, 291, 408, 494, 294, 212, 287, 252, 190, 170, 470, 211, 301, 58, 34, 376, 368, 131, 90, 158, 184, 259, 366,11, 223, 288, 373, 239, 86, 455, 277, 70, 269, 234, 398, 76, 12, 346, 401, 462, 108, 194, 407, 243, 100, 456, 75, 323, 321, 354, 445, 168, 474,491, 96, 327, 204, 280, 177, 47, 505, 152, 221, 29, 0, 216, 7, 43, 392, 383, 477, 48, 329, 293, 89, 95, 206, 430, 339, 303, 92, 343, 231,421, 60, 442, 20, 256, 40, 459, 480, 140, 417, 319, 232, 2, 344, 208, 237, 151, 133, 123, 446, 224, 298, 44, 50, 506, 348, 337, 464, 53, 425,227, 65, 371, 197, 146, 23, 81, 412, 121, 404, 335, 266, 179, 69, 98, 244, 387, 36, 499, 33, 403, 427, 160, 84, 135, 441, 272, 467, 359, 479,468, 384, 314, 103, 260, 112, 248, 435, 31, 173, 187, 487, 63, 436, 250, 182, 428, 254, 67, 57, 296, 472, 162, 484, 453, 312, 353, 218, 39, 117,175, 378, 127, 181, 411, 165, 305, 145, 500, 166, 374, 241, 110, 351, 283, 489]
e = [i>>4 for i in matrx]
flag = [i&1 for i in matrx]
t = [(i>>1)&7 for i in matrx]
#print len(aim)
out = [bin(n).replace('0b','')[::-1]+(8-len(bin(n).replace('0b','')))*'0' for n in aim]
#print out
out = [list(s) for s in out] 
#print out
out = [int(i) for k in out for i in k]

for i in range(256):
	if flag[i]==1:
		out[i]=out[i]^1

print 'e: ',e
print 't: ',t
print 'out: ',out
inp = [0]*32
assert len(out)==256
assert len(t)==256
assert len(e) ==256
for i in range(256):
	inp[e[i]] = inp[e[i]] | (out[i]<<t[i])
inp = [chr(i) for i in inp]
print ''.join(inp)
#for i in range(256):
#	v3 = ((inp[e])>>t)&1 
#	if flag:
#		v3 = v3^1
